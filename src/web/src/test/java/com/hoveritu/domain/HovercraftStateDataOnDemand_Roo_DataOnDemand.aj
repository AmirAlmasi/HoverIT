// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.hoveritu.domain;

import com.hoveritu.domain.HovercraftState;
import com.hoveritu.domain.HovercraftStateDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect HovercraftStateDataOnDemand_Roo_DataOnDemand {
    
    declare @type: HovercraftStateDataOnDemand: @Component;
    
    private Random HovercraftStateDataOnDemand.rnd = new SecureRandom();
    
    private List<HovercraftState> HovercraftStateDataOnDemand.data;
    
    public HovercraftState HovercraftStateDataOnDemand.getNewTransientHovercraftState(int index) {
        HovercraftState obj = new HovercraftState();
        setBatteryLevel(obj, index);
        setPressure(obj, index);
        setSpeed(obj, index);
        return obj;
    }
    
    public void HovercraftStateDataOnDemand.setBatteryLevel(HovercraftState obj, int index) {
        double BatteryLevel = new Integer(index).doubleValue();
        obj.setBatteryLevel(BatteryLevel);
    }
    
    public void HovercraftStateDataOnDemand.setPressure(HovercraftState obj, int index) {
        double Pressure = new Integer(index).doubleValue();
        obj.setPressure(Pressure);
    }
    
    public void HovercraftStateDataOnDemand.setSpeed(HovercraftState obj, int index) {
        int Speed = index;
        obj.setSpeed(Speed);
    }
    
    public HovercraftState HovercraftStateDataOnDemand.getSpecificHovercraftState(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        HovercraftState obj = data.get(index);
        Long id = obj.getId();
        return HovercraftState.findHovercraftState(id);
    }
    
    public HovercraftState HovercraftStateDataOnDemand.getRandomHovercraftState() {
        init();
        HovercraftState obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return HovercraftState.findHovercraftState(id);
    }
    
    public boolean HovercraftStateDataOnDemand.modifyHovercraftState(HovercraftState obj) {
        return false;
    }
    
    public void HovercraftStateDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = HovercraftState.findHovercraftStateEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'HovercraftState' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<HovercraftState>();
        for (int i = 0; i < 10; i++) {
            HovercraftState obj = getNewTransientHovercraftState(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
